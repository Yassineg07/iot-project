/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define ADC_THRESHOLD_HIGH  4000
#define ADC_THRESHOLD_MIDH  3000
#define ADC_THRESHOLD_MIDL  2000
#define ADC_THRESHOLD_LOW   1000
#define MAX_RETRIES 3
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
//volatile uint16_t adc_val;
int adc_val;
int retries = 0;
char tx_buffer [10] = {0};
int len;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Start_ADC_DMA() {
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adc_val, 1);
}


void Process_ADC_Value() {
	uint16_t pins_to_set = 0;
	uint16_t pins_to_reset = 0;

 	if (adc_val > ADC_THRESHOLD_HIGH) {
        pins_to_set = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    } else if (adc_val > ADC_THRESHOLD_MIDH) {
        pins_to_set = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14;
        pins_to_reset = GPIO_PIN_15;
    } else if (adc_val > ADC_THRESHOLD_MIDL) {
        pins_to_set = GPIO_PIN_12 | GPIO_PIN_13;
        pins_to_reset = GPIO_PIN_14 | GPIO_PIN_15;
    } else if (adc_val > ADC_THRESHOLD_LOW) {
        pins_to_set = GPIO_PIN_12;
        pins_to_reset = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    } else {
        pins_to_reset = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    }

    HAL_GPIO_WritePin(GPIOD, pins_to_set, GPIO_PIN_SET);
    HAL_GPIO_WritePin(GPIOD, pins_to_reset, GPIO_PIN_RESET);
}

/*
void Send_ADC_Value() {
	snprintf(tx_buffer, sizeof(tx_buffer), "ops\n");  // Example value

	if (huart2.gState == HAL_UART_STATE_READY) {  // Check if UART is ready
		HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)tx_buffer, sizeof(tx_buffer));
		if (status != HAL_OK) {
			Error_Handler();
		}
	}

}
*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
    if (hadc->Instance == ADC1) {

    	Process_ADC_Value();
    }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    if (htim->Instance == TIM6) {  // Check if the timer is TIM6
//    	Send_ADC_Value();

    	len = snprintf((char*)tx_buffer, sizeof(tx_buffer), "%u\n", (unsigned int)adc_val);
//    	len = snprintf(tx_buffer, sizeof(tx_buffer), "ops\n");

    		if (huart2.gState == HAL_UART_STATE_READY) {  // Check if UART is ready
    			HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(&huart2, (uint8_t*)tx_buffer, strlen((char*)tx_buffer));
    			if (status != HAL_OK) {

    			}
    		}
    }
}



/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();
  MX_TIM6_Init();
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim6);  // Start the 1s Timer Interrupt
  Start_ADC_DMA();	// Start ADC with DMA

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {

  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
